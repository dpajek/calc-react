{"version":3,"sources":["components/calculatordisplay.js","components/numberbutton.js","components/operatorbutton.js","components/clearbutton.js","components/calculatorkeypad.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorDisplay","props","displayedValue","previousValue","activeOperator","justAnswered","symbol","className","NumberButton","number","onClick","OperatorButton","operator","ClearButton","CalculatorKeyPad","setPreviousValue","setDisplayedValue","setActiveOperator","setJustAnswered","handleNumberClick","i","parseInt","handleOperatorClick","newOperator","answer","alert","Math","round","Number","EPSILON","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bf890d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./calculatordisplay.css\";\n\nfunction CalculatorDisplay(props) {\n  const { displayedValue, previousValue, activeOperator, justAnswered } = props;\n\n  const symbol = (() => {\n    switch (activeOperator) {\n      case \"multiply\":\n        return \"\\u00D7\";\n      case \"divide\":\n        return \"\\u00F7\";\n      case \"add\":\n        return \"+\";\n      case \"subtract\":\n        return \"-\";\n      case \"equals\":\n        return \"=\";\n      default:\n        return \"?\";\n    }\n  })();\n\n  return (\n    <div className=\"CalculatorDisplay\">\n      <div className=\"BreadCrumbs\">\n        {justAnswered || symbol === \"=\" ? \"\" : previousValue + \" \" + symbol}\n      </div>\n      <div className=\"Display\">{displayedValue}</div>\n    </div>\n  );\n}\n\nexport default CalculatorDisplay;\n","import React from \"react\";\nimport \"./numberbutton.css\";\n\nfunction NumberButton(props) {\n\n    const {number,onClick} = props;\n\n    return (\n      <button className=\"NumberButton\" onClick={()=>onClick(number)}>\n        {number}\n      </button>\n    );\n  }\n  \n  export default NumberButton;\n  ","import React from \"react\";\nimport \"./operatorbutton.css\";\n\nfunction OperatorButton(props) {\n  const { operator, onClick } = props;\n\n  const symbol = (() => {\n    switch (operator) {\n      case \"multiply\":\n        return \"\\u00D7\";\n      case \"divide\":\n        return \"\\u00F7\";\n      case \"add\":\n        return \"+\";\n      case \"subtract\":\n        return \"-\";\n      case \"equals\":\n        return \"=\";\n      default:\n        return \"?\";\n    }\n  })();\n\n  return (\n    <button className=\"OperatorButton\" onClick={() => onClick(operator)}>\n      {symbol}\n    </button>\n  );\n}\n\nexport default OperatorButton;\n","import React from \"react\";\nimport \"./clearbutton.css\";\n\nfunction ClearButton(props) {\n  const { onClick } = props;\n  return (\n    <button className=\"ClearButton\" onClick={onClick}>\n      clr\n    </button>\n  );\n}\n\nexport default ClearButton;\n","import React from \"react\";\nimport \"./calculatorkeypad.css\";\n\nimport NumberButton from \"./numberbutton\";\nimport OperatorButton from \"./operatorbutton\";\nimport ClearButton from \"./clearbutton\";\n\nfunction CalculatorKeyPad(props) {\n  const {\n    previousValue,\n    setPreviousValue,\n    displayedValue,\n    setDisplayedValue,\n    activeOperator,\n    setActiveOperator,\n    justAnswered,\n    setJustAnswered,\n  } = props;\n\n  function handleNumberClick(i) {\n    if (justAnswered === true) {\n      setPreviousValue(displayedValue);\n      setDisplayedValue(i);\n      setJustAnswered(false);\n    } else {\n      setDisplayedValue(parseInt(\"\" + displayedValue + i));\n    }\n  }\n\n  function handleOperatorClick(newOperator) {\n    if (justAnswered !== true) {\n      let answer;\n      switch (activeOperator) {\n        case \"multiply\":\n          answer = previousValue * displayedValue;\n          setJustAnswered(true);\n          break;\n        case \"divide\":\n          answer = previousValue / displayedValue;\n          setJustAnswered(true);\n          break;\n        case \"add\":\n          answer = previousValue + displayedValue;\n          setJustAnswered(true);\n          break;\n        case \"subtract\":\n          answer = previousValue - displayedValue;\n          setJustAnswered(true);\n          break;\n        case \"equals\":\n          setPreviousValue(displayedValue);\n          answer = 0;\n          break;\n        default:\n          alert(newOperator);\n      }\n\n      setDisplayedValue(Math.round((answer + Number.EPSILON) * 100) / 100);\n    } else {\n      setPreviousValue(displayedValue);\n      setDisplayedValue(0);\n      setJustAnswered(false);\n    }\n    setActiveOperator(newOperator);\n  }\n\n  function handleClear() {\n      setActiveOperator(\"equals\");\n    setPreviousValue(0);\n    setDisplayedValue(0);\n    setJustAnswered(false);\n  }\n\n  return (\n    <div className=\"CalculatorKeyPad\">\n      <NumberButton number={7} onClick={(i) => handleNumberClick(i)} />\n      <NumberButton number={8} onClick={(i) => handleNumberClick(i)} />\n      <NumberButton number={9} onClick={(i) => handleNumberClick(i)} />\n      <OperatorButton\n        operator={\"divide\"}\n        onClick={(operator) => handleOperatorClick(operator)}\n      />\n\n      <NumberButton number={4} onClick={(i) => handleNumberClick(i)} />\n      <NumberButton number={5} onClick={(i) => handleNumberClick(i)} />\n      <NumberButton number={6} onClick={(i) => handleNumberClick(i)} />\n      <OperatorButton\n        operator={\"multiply\"}\n        onClick={(operator) => handleOperatorClick(operator)}\n      />\n\n      <NumberButton number={1} onClick={(i) => handleNumberClick(i)} />\n      <NumberButton number={2} onClick={(i) => handleNumberClick(i)} />\n      <NumberButton number={3} onClick={(i) => handleNumberClick(i)} />\n      <OperatorButton\n        operator={\"add\"}\n        onClick={(operator) => handleOperatorClick(operator)}\n      />\n\n      <ClearButton onClick={handleClear}/>\n      <NumberButton number={0} onClick={(i) => handleNumberClick(i)} />\n      <OperatorButton\n        operator={\"equals\"}\n        onClick={(operator) => handleOperatorClick(operator)}\n      />\n      <OperatorButton\n        operator={\"subtract\"}\n        onClick={(operator) => handleOperatorClick(operator)}\n      />\n    </div>\n  );\n}\n\nexport default CalculatorKeyPad;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport CalculatorDisplay from \"./components/calculatordisplay\";\nimport CalculatorKeyPad from \"./components/calculatorkeypad\";\n\nfunction App() {\n  const [displayedValue, setDisplayedValue] = useState(0);\n  const [activeOperator, setActiveOperator] = useState(\"equals\");\n  const [previousValue, setPreviousValue] = useState(0);\n  const [justAnswered, setJustAnswered] = useState(false);\n\n\n  return (\n    <div className=\"App\">\n      <CalculatorDisplay\n        displayedValue={displayedValue}\n        previousValue={previousValue}\n        activeOperator={activeOperator}\n        justAnswered={justAnswered}\n      />\n      <CalculatorKeyPad\n        displayedValue={displayedValue}\n        setDisplayedValue={setDisplayedValue}\n        previousValue={previousValue}\n        setPreviousValue={setPreviousValue}\n        activeOperator={activeOperator}\n        setActiveOperator={setActiveOperator}\n        justAnswered={justAnswered}\n        setJustAnswered={setJustAnswered}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}